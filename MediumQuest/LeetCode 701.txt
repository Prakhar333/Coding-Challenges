LeetCode 701 Insert Into A Binary Tree (Medium)

Q:- You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. 
It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

Example: 
Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
        
            4
          /   \
         2     7
        / \   / \
       1   3 5  null

Solution:
This one is Naive solution if you want to grasp each If and Else that can ever happen during
insertion in a binary Tree.

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode head = root;
        //Base case
        if(root==null){
            TreeNode newNode = new TreeNode(val);
            head = newNode;
            return head;
        }
         if(root.right==null && root.left==null){
            TreeNode newNode = new TreeNode(val);
            if(val>root.val){
                root.right = newNode;
            }else{
                root.left = newNode;
            }
        }
        else if(val<root.val){
            if(root.left==null)
            {
                TreeNode newNode = new TreeNode(val);
                root.left = newNode;
                return head;
            }else{
                insertIntoBST(root.left,val);
            }
            
        }else if(val>root.val){
            if(root.right==null)
            {
                TreeNode newNode = new TreeNode(val);
                root.right = newNode;
                return head;
            }else{
                insertIntoBST(root.right,val);    
            }
        }
        return head;
    }
}

OR 

A optimized version for the same code

class Solution{
        public TreeNode insertIntoBST(TreeNode root, int val){
		//Base case
		if(root==null)
		{
			return TreeNode(val);
		}
		TreeNode node = root;
		while(node.val!=val){
			if(val<node.val && node.left==null)
				node.left = new TreeNode(val);
			else if(val > node.val && node.right==null)
				node.right = new TreeNode(val);
			node = node.val > val ? node.left : node.right;
		}
		return root;
		
	}
}