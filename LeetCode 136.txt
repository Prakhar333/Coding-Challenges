LeetCode 136 Easy

<- Single Number ->
The Question: Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Keypoints:
a) Array of unsorted nums.
b) Each number appears twice except for one.

Constraint:
a) Do it in linear time O(n).
b) Auxillary space O(1).

Example:
4 1 2 2 1 -> 4
1 2 2 -> 1
2 2 3 4 4 5 6 5 6 -> 3
5 1 1 2 2 5 8 -> 8
1 2 3 3 2 1 4 -> 4

Solution: 
a) Brute force approach without constraints. Time Complexity O(n log n)| Space Complexity O(1)
 	1) Sort the array O(log N).
	2) for(i: arr.length-1)
		int num1 = arr[i];
		int num2 = arr[i+1];
		if(num1!=num2)
	    		return num1;
		else if(num1==num2)
	    		i = i+2;		
	3) return arr[arr.length-1]

b) Optimizing it to linear time approach we use XOR operation.
	1) int res = 0;
	2) for(i till nums.length)
		res = res^nums[i]
	3) return res;

 	/*
        CODE EXPLANATION
          Properties of XOR operation
          X ^ 0  --> X
          X ^ X  --> 0
          So, if Element Found twice in the Array then it's XOR will be 0
          And this 0 has No Impact on the Element that Exist with Count 1
          FOR EXAMPLE :
            Array -> [ 1, 2, 3, 2, 1 ]
          Find XOR of All Elements
             1 ^ 2 ^ 3 ^ 2 ^ 1
             (1 ^ 1) ^ (2 ^ 2) ^ 3
               0     ^    0    ^ 3
               0 ^ 3 = 3    --> RESULT

         */
